package pact4s.messages

import au.com.dius.pact.provider.{MessageAndMetadata, PactVerifyProvider}
import pact4s.MessageAndMetadataBuilder

// Provides message generators for annotated method verification.
// Because pact-jvm searches across the classpath, we can only define these once.
class MessagesProvider {
  @PactVerifyProvider("A message to say goodbye")
  def goodbyeMessageProvider(): MessageAndMetadata = MessagesProvider.goodbyeMessage().build

  @PactVerifyProvider("A message to say hello")
  def helloMessageProvider(): MessageAndMetadata = MessagesProvider.helloMessage().build

  @PactVerifyProvider("A message with nested arrays in the body")
  def nestedArrayMessageProvider(): MessageAndMetadata = MessagesProvider.nestedArrayMessage().build

  @PactVerifyProvider("A message with a json array as content")
  def topLevelArrayMessageProvider(): MessageAndMetadata = MessagesProvider.topLevelArrayMessage().build
}

// Provides messages for response factory verification.
// Normally these messages would be generated by the application.
// For example, by calling an application method that returns information that can be converted into the
// MessageAndMetadataBuilder. Or perhaps by causing the application to publish a message, and capturing the result.
object MessagesProvider {
  def goodbyeMessage(): MessageAndMetadataBuilder = {
    val body = """{"goodbye":"harry"}"""
    MessageAndMetadataBuilder(body)
  }

  def helloMessage(): MessageAndMetadataBuilder = {
    val metadata = Map("hi" -> "there")
    val body     = """{"hello":"harry"}"""
    MessageAndMetadataBuilder(body, metadata)
  }

  def nestedArrayMessage(): MessageAndMetadataBuilder = {
    val body = """{"array": [1,2,3]}"""
    MessageAndMetadataBuilder(body)
  }

  def topLevelArrayMessage(): MessageAndMetadataBuilder = {
    val body = """[{"a":1},{"b":true}]"""
    MessageAndMetadataBuilder(body)
  }

  def messages: String => MessageAndMetadataBuilder = {
    case "A message to say goodbye" =>
      goodbyeMessage()
    case "A message to say hello" =>
      val metadata = Map("hi" -> "there")
      val body     = """{"hello":"harry"}"""
      MessageAndMetadataBuilder(body, metadata)
    case "A message with nested arrays in the body" =>
      MessageAndMetadataBuilder("""{"array": [1,2,3]}""")
    case "A message with a json array as content" =>
      MessageAndMetadataBuilder("""[{"a":1},{"b":true}]""")
    case description =>
      throw new NoSuchElementException(s"Missing generator for message: '$description'")
  }
}
